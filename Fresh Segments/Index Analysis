The index_value is a measure which can be used to reverse calculate the average composition for Fresh Segmentsâ€™ clients.

Average composition can be calculated by dividing the composition column by the index_value column rounded to 2 decimal places.

What is the top 10 interests by the average composition for each month?

WITH comp_cte AS (
SELECT met.month_year, met.interest_id, map.interest_name, ROUND((met.composition / met.index_value)::NUMERIC, 2) AS avg_composition
FROM fresh_segments.interest_metrics met
JOIN fresh_segments.interest_map map
ON met.interest_id::INT = map.id
WHERE met._month IS NOT NULL
AND met._year IS NOT NULL
GROUP BY 1, 2, 3, 4
),
rank_cte AS (
SELECT month_year, interest_id, interest_name, avg_composition, RANK() OVER(PARTITION BY month_year ORDER BY avg_composition DESC) AS comp_ranking
FROM comp_cte
)

SELECT *
FROM rank_cte
WHERE comp_ranking <= 10;

-- SAMPLE OF QUERY FOR '01-2019'

/*
month_year	interest_id	interest_name	avg_composition	comp_ranking
2019-01-01	21057	Work Comes First Travelers	7.66	1
2019-01-01	6065	Solar Energy Researchers	7.05	2
2019-01-01	21245	Readers of Honduran Content	6.67	3
2019-01-01	18783	Nursing and Physicians Assistant Journal Researchers	6.46	4
2019-01-01	5969	Luxury Bedding Shoppers	6.46	4
2019-01-01	7541	Alabama Trip Planners	6.44	6
2019-01-01	10981	New Years Eve Party Ticket Purchasers	6.16	7
2019-01-01	34	Teen Girl Clothing Shoppers	5.96	8
2019-01-01	10977	Christmas Celebration Researchers	5.65	9
2019-01-01	21237	Chelsea Fans	5.48	10
*/

For all of these top 10 interests - which interest appears the most often?

WITH comp_cte AS (
SELECT met.month_year, met.interest_id, map.interest_name, ROUND((met.composition / met.index_value)::NUMERIC, 2) AS avg_composition
FROM fresh_segments.interest_metrics met
JOIN fresh_segments.interest_map map
ON met.interest_id::INT = map.id
WHERE met._month IS NOT NULL
AND met._year IS NOT NULL
GROUP BY 1, 2, 3, 4
),
rank_cte AS (
SELECT month_year, interest_id, interest_name, avg_composition, RANK() OVER(PARTITION BY month_year ORDER BY avg_composition DESC) AS comp_ranking
FROM comp_cte
),
top_10_cte AS (
SELECT *
FROM rank_cte
WHERE comp_ranking <= 10 
)

SELECT interest_name, COUNT(1) AS appearances
FROM top_10_cte
GROUP BY 1
ORDER BY 2 DESC;

/*
interest_name	appearances
Luxury Bedding Shoppers	10
Alabama Trip Planners	10
Solar Energy Researchers	10
New Years Eve Party Ticket Purchasers	9
Readers of Honduran Content	9
Nursing and Physicians Assistant Journal Researchers	9
Teen Girl Clothing Shoppers	8
Work Comes First Travelers	8
Christmas Celebration Researchers	7
Gym Equipment Owners	5
Recently Retired Individuals	5
Luxury Retail Shoppers	5
Las Vegas Trip Planners	5
Furniture Shoppers	5
Asian Food Enthusiasts	5
Cosmetics and Beauty Shoppers	5
Readers of Catholic News	4
Restaurant Supply Shoppers	4
PlayStation Enthusiasts	4
Medicare Researchers	3
Medicare Provider Researchers	2
Chelsea Fans	2
Medicare Price Shoppers	1
Cruise Travel Intenders	1
Family Adventures Travelers	1
HDTV Researchers	1
Video Gamers	1
Marijuana Legalization Advocates	1
Gamers	1
Luxury Boutique Hotel Researchers	1
*/

What is the average of the average composition for the top 10 interests for each month?

WITH comp_cte AS (
SELECT met.month_year, met.interest_id, map.interest_name, ROUND((met.composition / met.index_value)::NUMERIC, 2) AS avg_composition
FROM fresh_segments.interest_metrics met
JOIN fresh_segments.interest_map map
ON met.interest_id::INT = map.id
WHERE met._month IS NOT NULL
AND met._year IS NOT NULL
GROUP BY 1, 2, 3, 4
),
rank_cte AS (
SELECT month_year, interest_id, interest_name, avg_composition, RANK() OVER(PARTITION BY month_year ORDER BY avg_composition DESC) AS comp_ranking
FROM comp_cte
),
top_10_cte AS (
SELECT *
FROM rank_cte
WHERE comp_ranking <= 10 
)

SELECT month_year, ROUND(AVG(avg_composition), 2) AS top10_avg_composition
FROM top_10_cte
GROUP BY 1;

/*
month_year	top10_avg_composition
2018-07-01	6.04
2018-08-01	5.95
2018-09-01	6.90
2018-10-01	7.07
2018-11-01	6.62
2018-12-01	6.65
2019-01-01	6.32
2019-02-01	6.58
2019-03-01	6.12
2019-04-01	5.75
2019-05-01	3.54
2019-06-01	2.43
2019-07-01	2.77
2019-08-01	2.63
*/

What is the 3 month rolling average of the max average composition value from September 2018 to August 2019 and include the previous top ranking interests in the same output shown below.

-- 1. Step 1, create cte that computes average composition value into the dataset
-- 2. Step 2, create cte that ranks rows by average compositon value
-- 3. Step 3, using our results from step 2 create a cte that only shows data where we have filtered ranking to show max value of the average of average composition, grouped by month. This gives the max_index_composition column.
-- 4. Step 4, use a cte to calculate the three month avg. Take max value of avg_average_comp and filter using preceding rows for a total of 3 months
-- 5. Step 5, use lag() func to find previous interest_name and avg_comp values for one month and two months previous. Concat values of interest_name and avg_average_comp value for final two desired columns. Always ensure these lag are grouped by month_year and refer back in sequential order ascendingly
-- 6. Final query, ensure we have no null values present in one_month_ago and two_months_ago cols, by check if avg_average_comp values are NOT NULL for first & second month_year rows.

WITH comp_cte AS (
SELECT met.month_year, met.interest_id, map.interest_name, ROUND((met.composition / met.index_value)::NUMERIC, 2) AS avg_composition
FROM fresh_segments.interest_metrics met
JOIN fresh_segments.interest_map map
ON met.interest_id::INT = map.id
WHERE met._month IS NOT NULL
AND met._year IS NOT NULL
),
rank_cte AS (
SELECT month_year, interest_id, interest_name, avg_composition, RANK() OVER(PARTITION BY month_year ORDER BY avg_composition DESC) AS comp_ranking
FROM comp_cte
),
max_cte AS (
SELECT month_year, interest_id, interest_name, ROUND(AVG(avg_composition), 2) AS avg_average_comp
FROM rank_cte
WHERE comp_ranking = 1
GROUP BY 1, 2, 3
),
avg_three_months_cte AS (
SELECT *,
ROUND(AVG(avg_average_comp) OVER(ORDER BY month_year ROWS BETWEEN 2 PRECEDING AND CURRENT ROW), 2) AS three_month_moving_avg 
FROM max_cte
),
lag_cte AS (
SELECT *,
ROUND(LAG(avg_average_comp, 1) OVER(ORDER BY month_year), 2) AS one_month,
ROUND(LAG(avg_average_comp, 2) OVER(ORDER BY month_year), 2) AS two_months,
CONCAT(LAG(interest_name, 1) OVER(ORDER BY month_year), ': ', LAG(avg_average_comp, 1) OVER(ORDER BY month_year)) AS one_month_ago,
CONCAT(LAG(interest_name, 2) OVER(ORDER BY month_year), ': ', LAG(avg_average_comp, 2) OVER(ORDER BY month_year)) AS two_months_ago 
FROM avg_three_months_cte
)  

SELECT month_year, interest_id, interest_name, avg_average_comp AS max_index_composition, three_month_moving_avg, one_month_ago, two_months_ago
FROM lag_cte
WHERE one_month IS NOT NULL AND two_months IS NOT NULL;

Provide a possible reason why the max average composition might change from month to month? Could it signal something is not quite right with the overall business model for Fresh Segments?

-- Uisng an example of travelling, during peak tourism months, it would be expected that more users would interact with these interest as opposed to off-peak months. Therefore, relative to season interactions would be higher or lower.
-- From May 2019 onwards, the max_index_composition dropped noticeably compared to the previous months, this might be due to the fact that there is now a much more varied spread of interests interacted with in their customer lists, which are in turn provided to the fresh segments agency.
-- If customers utilise the client's service/product consistently, they may see the same advertisements repeatedly, therefore they begin to interact with ad content under new interests.
-- This varied spread of interest interactions may have been a deliberate ploy by the client, in order to diversify consumption of ad content to their customers, so each interest would represent a lesser proportion of ad interactions (composition value).
