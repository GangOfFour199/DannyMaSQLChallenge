****************************NOTE: ALL SOLUTIONS PROVIDED UTILISING PostgreSQL v13*********************************

In a single query, perform the following operations and generate a new table in the data_mart schema named clean_weekly_sales:

1 - Convert the week_date to a DATE format
2 - Add a week_number as the second column for each week_date value, for example any value from the 1st of January to 7th of January will be 1, 8th to 14th will be 2 etc
3 - Add a month_number with the calendar month for each week_date value as the 3rd column
4 - Add a calendar_year column as the 4th column containing either 2018, 2019 or 2020 values
5 - Add a new column called age_band after the original segment column using the following mapping on the number inside the segment value
6 - Add a new demographic column using the following mapping for the first letter in the segment values:
7 - Ensure all null string values with an "unknown" string value in the original segment column as well as the new age_band and demographic columns
8 - Generate a new avg_transaction column as the sales value divided by transactions rounded to 2 decimal places for each record

-- FIRST, create function to extract week from week_date DATE type AS week_number condtion won't be fulfilled correctly

CREATE function extract_week(input_date date)
RETURNS int
AS 
$$
BEGIN
	RETURN(input_date - date_trunc('year', input_date)::date) / 7 + 1;
END;
$$
LANGUAGE plpgsql;

-- IN HERE, drop table and create table. Create AS via selecting all data from weekly_sales schema

DROP TABLE IF EXISTS data_mart.clean_weekly_sales;
CREATE TABLE data_mart.clean_weekly_sales AS SELECT TO_DATE(week_date, 'dd/mm/yy') AS formatted_date,
/* ADD custom function here, also note must continue to extract from DATE type not string type value of 'week_date' */
extract_week(TO_DATE(week_date, 'dd/mm/yy')) AS week_number, EXTRACT(MONTH FROM TO_DATE(week_date, 'dd/mm/yy')) AS month_number, EXTRACT(YEAR FROM TO_DATE(week_date, 'dd/mm/yy')) AS calendar_year, segment, 
(CASE WHEN RIGHT(segment, 1) = '1' THEN 'Young Adults' WHEN RIGHT(segment, 1) = '2' THEN 'Middle Aged' WHEN RIGHT(segment, 1) IN ('3', '4') THEN 'Retirees' ELSE 'unknown' END) AS age_band, 
(CASE WHEN LEFT(segment, 1) = 'C' THEN 'Couples' WHEN LEFT(segment, 1) = 'F' THEN 'Families' ELSE 'unknown' END) AS demographic, 
region, customer_type, platform,
/* convert sales to a numeric type in order to get avg_transactions values with decimals */  ROUND((sales::NUMERIC/transactions), 2) AS avg_transactions, transactions, sales
FROM data_mart.weekly_sales;
